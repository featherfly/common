
package [(${code.packageName})];

import java.util.Locale;

/**
 * <p>
 * [(${code.name})]
 * </p>
 * 
 * @author [(${code.author})]
 */
public class [(${code.name})] extends [(${code.parent.name})] {

    private static final String MODULE = "[(${code.module})]";
    /*[- */
    private static final Class<? extends Throwable> FOR_EXCEPTION_TYPE = [(${exception.packageName})].[(${exception.name})].class;
    /* -]*/
    /**
     * @param num num
     * @param key key
     * @param argus argus
     */
    public [(${code.name})](Integer num, String key) {
        this(num, key, new Object[] {});
    }
    /**
     * @param num num
     * @param key key
     * @param argus argus
     */
    public [(${code.name})](Integer num, String key, Object[] argus) {
        this(num, key, null, argus);
    }
    
    /**
     * @param num num
     * @param key  key
     * @param locale locale
     * @param argus argus
     */
    public [(${code.name})](Integer num, String key, Locale locale) {
        this(num, key, locale, new Object[]{});
    }
    
    /**
     * @param num num
     * @param key  key
     * @param locale locale
     * @param argus argus
     */
    public [(${code.name})](Integer num, String key, Locale locale, Object[] argus) {
        super(MODULE, num, key, locale, argus);
    }
    
    public enum [(${code.name})]s {
        [# th:each="c,stat : ${code.codes}"]
        [(${code.module})][(${c.num})]("[(${c.key})]", [(${c.num})])[# th:if="${!stat.last}"],[/][# th:if="${stat.last}"];[/]
        [/]        
        private String key;
        
        private Integer num;
        
        /**
         * @param key key
         * @param num num
         */
        private [(${code.name})]s(String key, Integer num) {
            this.key = key;
            this.num = num;
        }
        /**
         * get key
         * @return key
         */
        public String getKey() {
            return key;
        }
        /**
         * get num
         * @return num
         */
        public Integer getNum() {
            return num;
        }
    }
   
    [# th:each="c : ${code.codes}"]
    /**
     * <p>
     * create [(${c.name})]Code
     * </p>
     * [# th:each="argu : ${c.argus}"]@param [(${argu.name})] [(${argu.name})]
     * [/]
     * @return [(${c.name})]Code
     */
    public static [(${code.name})] create[(${c.name})]Code(
        [# th:each="argu,stat : ${c.argus}"][(${argu.type.name})] [(${argu.name})][# th:if="${!stat.last}"], [/][/]) {
        return new [(${code.name})]([(${code.name})]s.[(${code.module})][(${c.num})].num
                , [(${code.name})]s.[(${code.module})][(${c.num})].key[# th:if="${not #lists.isEmpty(c.argus)}"]
                , new Object[] {[# th:each="argu,stat : ${c.argus}"][(${argu.name})][# th:if="${!stat.last}"], [/][/]}[/]);
    }
    
[/]}
